import hashlib
import requests
import datetime
from bson.objectid import ObjectId
import src.config as config
from src.models.user import User
from src.utils.image_encoder import ImageEncoder
from .base_repository import BaseRepository


class UserRepository(BaseRepository):

    COLLECTION_NAME = 'users'

    def __init__(self):
        super().__init__()
        self.users_cache = {}

    def email_exists(self, email: str) -> bool:
        return self.get_by_email(email.lower()) is not None

    def get_by_email(self, email: str):
        user = self.collection.find_one({'email': email.lower()})
        if user:
            return User.from_json(user)
        return None

    def get_by_id(self, user_id: str, get_avatar=False):
        model = User.from_json(self.collection.find_one({'_id': ObjectId(user_id)}))
        if get_avatar:
            model.avatar = self.get_user_avatar(model.email)
        return model

    def get_user_avatar(self, email: str):
        response = requests.get(config.GRAVATAR_AUTOGENERATED_AVATAR_URL.format(
            hashlib.md5(email.lower().encode('utf-8')).hexdigest()))
        return ImageEncoder.to_base_64_str(response.content)

    def insert(self, model: User):
        entity = model.to_json(
            include_hashed_password=True, creating_user=True)
        del entity['id']
        return str(self.collection.insert_one(entity).inserted_id)

    def get(self, user_id: str):
        user = self.collection.find_one({'_id': ObjectId(user_id)})
        if user:
            return User.from_json(user)
        return None

    def update_password(self, user_id: str, hashed_pass: str) -> bool:
        updated = self.collection.update_one(
            {'_id': ObjectId(user_id)},
            {'$set': {'hashedPassword': hashed_pass}}
        )
        return updated.matched_count == 1
